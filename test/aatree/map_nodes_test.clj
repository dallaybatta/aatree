(ns aatree.map-nodes-test
  (:require [clojure.test :refer :all]
            [aatree.nodes :refer :all]
            [aatree.map-nodes :refer :all])
  (:import (clojure.lang MapEntry RT)))

(def m0 (create-empty-map-node))

(def m1 (insert m0 (new MapEntry "1" 1001) RT/DEFAULT_COMPARATOR))
(pnodev m1 "m1")
(pnodev (del m1 "1" RT/DEFAULT_COMPARATOR) "m1 - 1")

(def m13 (insert m1 (new MapEntry "3" 1003) RT/DEFAULT_COMPARATOR))
(pnodev m13 "m13")
(println "m13 level" (.level m13))
(pnodev (del m13 "1" RT/DEFAULT_COMPARATOR) "m13 - 1")
(pnodev (del (del m13 "1" RT/DEFAULT_COMPARATOR) "3" RT/DEFAULT_COMPARATOR) "m13 - -")
(def m123 (insert m13 (new MapEntry "2" 1002) RT/DEFAULT_COMPARATOR))
(pnodev m123 "m123")
(pnodev (del m123 "1"RT/DEFAULT_COMPARATOR) "m123 - 1")
(pnodev (del m123 "2" RT/DEFAULT_COMPARATOR) "m123 - 2")
(pnodev (del m123 "3" RT/DEFAULT_COMPARATOR) "m123 - 3")
(pnodev (insert m123 (new MapEntry "1" 1001) RT/DEFAULT_COMPARATOR) "m123 + 1")
(pnodev (insert m123 (new MapEntry "1" 1010) RT/DEFAULT_COMPARATOR) "m123 + 1")

(println (new-counted-seq m0))
(println (new-counted-seq m1))
(println (new-counted-seq m13))
(println (new-counted-seq m123))
(println (new-counted-reverse-seq m123))
(println (new-map-key-seq m123))
(println (new-map-key-reverse-seq m123))
(println (new-map-value-seq m123))
(println (new-map-value-reverse-seq m123))

(println "")
(def mi (new-counted-iterator m123))
(println (.hasNext mi))
(println (.next mi))
(println (.hasNext mi))
(println (.next mi))
(println (.hasNext mi))
(println (.next mi))
(println (.hasNext mi))
(println (index-of m123 "0" RT/DEFAULT_COMPARATOR))
(println (index-of m123 "1" RT/DEFAULT_COMPARATOR))
(println (index-of m123 "2" RT/DEFAULT_COMPARATOR))
(println (index-of m123 "3" RT/DEFAULT_COMPARATOR))
(println (index-of m123 "4" RT/DEFAULT_COMPARATOR))
(println (nth-t2 m123 0))
(println (nth-t2 m123 1))
(println (nth-t2 m123 2))
